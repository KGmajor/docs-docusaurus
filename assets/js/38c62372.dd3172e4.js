"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6106],{9613:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>v});var i=t(9496);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);r&&(i=i.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,i,n=function(e,r){if(null==e)return{};var t,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=i.createContext({}),s=function(e){var r=i.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=s(e.components);return i.createElement(d.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return i.createElement(i.Fragment,{},r)}},m=i.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=n,v=p["".concat(d,".").concat(m)]||p[m]||u[m]||a;return t?i.createElement(v,o(o({ref:r},c),{},{components:t})):i.createElement(v,o({ref:r},c))}));function v(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var d in r)hasOwnProperty.call(r,d)&&(l[d]=r[d]);l.originalType=e,l[p]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2304:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=t(7605),n=(t(9496),t(9613));const a={},o="Key DID libraries",l={unversionedId:"protocol/js-ceramic/guides/ceramic-clients/authentication/key-did",id:"protocol/js-ceramic/guides/ceramic-clients/authentication/key-did",title:"Key DID libraries",description:"---",source:"@site/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/key-did.md",sourceDirName:"protocol/js-ceramic/guides/ceramic-clients/authentication",slug:"/protocol/js-ceramic/guides/ceramic-clients/authentication/key-did",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/key-did",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"DID JSON-RPC client",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc"},next:{title:"Module: did-session",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-session"}},d={},s=[{value:"Available libraries",id:"available-libraries",level:2},{value:"Key DID resolver",id:"key-did-resolver",level:2},{value:"Installation",id:"installation",level:3},{value:"Usage",id:"usage",level:3},{value:"Key DID providers",id:"key-did-providers",level:2},{value:"Key DID provider ED25519",id:"key-did-provider-ed25519",level:2},{value:"Installation",id:"installation-1",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Key DID provider secp256k1",id:"key-did-provider-secp256k1",level:2},{value:"Installation",id:"installation-2",level:3},{value:"Usage",id:"usage-2",level:3}],c={toc:s},p="wrapper";function u(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,i.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"key-did-libraries"},"Key DID libraries"),(0,n.kt)("hr",null),(0,n.kt)("p",null,"The Key DID libraries include the ",(0,n.kt)("a",{parentName:"p",href:"#key-did-resolver"},"resolver")," and ",(0,n.kt)("a",{parentName:"p",href:"#key-did-providers"},"multiple providers")," to provide a simple way for developers to get started using the ",(0,n.kt)("a",{parentName:"p",href:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc"},"DID client")," with the ",(0,n.kt)("inlineCode",{parentName:"p"},"did:key")," method."),(0,n.kt)("h2",{id:"available-libraries"},"Available libraries"),(0,n.kt)("hr",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("a",{parentName:"li",href:"#key-did-resolver"},"Key DID resolver")," allows a DID JSON-RPC client to resolve accounts using the ",(0,n.kt)("inlineCode",{parentName:"li"},"did:key")," method"),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("a",{parentName:"li",href:"#key-did-provider-ed25519"},"Key DID provider ED25519")," allows applications to create and use Key DID accounts for ED25519 keypairs. This provider supports encryption."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("a",{parentName:"li",href:"#key-did-provider-secp256k1"},"Key DID provider secp256k1")," allows applications to create and use Key DID accounts for secp256k1 keypairs. This provider does not supports encryption.")),(0,n.kt)("h2",{id:"key-did-resolver"},"Key DID resolver"),(0,n.kt)("hr",null),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"key-did-resolver")," module is needed to resolve DID documents using the ",(0,n.kt)("inlineCode",{parentName:"p"},"did:key")," method."),(0,n.kt)("h3",{id:"installation"},"Installation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"npm install key-did-resolver\n")),(0,n.kt)("h3",{id:"usage"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { DID } from 'dids'\nimport { getResolver } from 'key-did-resolver'\n\nasync function resolveDID() {\n  const did = new DID({ resolver: getResolver() })\n  return await did.resolve('did:key:...')\n}\n")),(0,n.kt)("h2",{id:"key-did-providers"},"Key DID providers"),(0,n.kt)("hr",null),(0,n.kt)("p",null,"Different libraries implement a provider for the ",(0,n.kt)("inlineCode",{parentName:"p"},"did:key")," method based on different cryptographic primitives. These providers may have different possibilities, for example ",(0,n.kt)("inlineCode",{parentName:"p"},"key-did-provider-ed25519")," supports encryption while ",(0,n.kt)("inlineCode",{parentName:"p"},"key-did-provider-secp256k1")," does not."),(0,n.kt)("h2",{id:"key-did-provider-ed25519"},"Key DID provider ED25519"),(0,n.kt)("hr",null),(0,n.kt)("p",null,"This is the ",(0,n.kt)("strong",{parentName:"p"},"recommended provider")," for the ",(0,n.kt)("inlineCode",{parentName:"p"},"key:did")," method in most cases."),(0,n.kt)("h3",{id:"installation-1"},"Installation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"npm install key-did-provider-ed25519\n")),(0,n.kt)("h3",{id:"usage-1"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { DID } from 'dids'\nimport { Ed25519Provider } from 'key-did-provider-ed25519'\nimport { getResolver } from 'key-did-resolver'\n\n// `seed` must be a 32-byte long Uint8Array\nasync function authenticateDID(seed) {\n  const provider = new Ed25519Provider(seed)\n  const did = new DID({ provider, resolver: getResolver() })\n  await did.authenticate()\n  return did\n}\n")),(0,n.kt)("h2",{id:"key-did-provider-secp256k1"},"Key DID provider secp256k1"),(0,n.kt)("hr",null),(0,n.kt)("p",null,"This provider ",(0,n.kt)("em",{parentName:"p"},"does not support encryption"),", so using methods such as ",(0,n.kt)("inlineCode",{parentName:"p"},"createJWE")," on the ",(0,n.kt)("inlineCode",{parentName:"p"},"DID")," instance is not supported."),(0,n.kt)("h3",{id:"installation-2"},"Installation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"npm install key-did-provider-secp256k1\n")),(0,n.kt)("h3",{id:"usage-2"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { DID } from 'dids'\nimport { Secp256k1Provider } from 'key-did-provider-secp256k1'\nimport { getResolver } from 'key-did-resolver'\n\n// `seed` must be a 32-byte long Uint8Array\nasync function authenticateDID(seed) {\n  const provider = new Secp256k1Provider(seed)\n  const did = new DID({ provider, resolver: getResolver() })\n  await did.authenticate()\n  return did\n}\n")))}u.isMDXComponent=!0}}]);