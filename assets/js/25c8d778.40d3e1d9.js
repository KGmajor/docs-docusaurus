"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7935],{37615:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var t=a(11527),l=a(63883);const o={},r="Example: Container of Items",i={id:"composedb/guides/data-modeling/relations-container-of-items",title:"Example: Container of Items",description:"Creating the Models",source:"@site/docs/composedb/guides/data-modeling/relations-container-of-items.mdx",sourceDirName:"composedb/guides/data-modeling",slug:"/composedb/guides/data-modeling/relations-container-of-items",permalink:"/docs-docusaurus/docs/composedb/guides/data-modeling/relations-container-of-items",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{}},d={},s=[{value:"Creating the Models",id:"creating-the-models",level:2},{value:"Inserting Data",id:"inserting-data",level:2},{value:"Query The Data",id:"query-the-data",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"example-container-of-items",children:"Example: Container of Items"}),"\n",(0,t.jsx)(n.h2,{id:"creating-the-models",children:"Creating the Models"}),"\n",(0,t.jsx)(n.p,{children:"First, create the SDL for your item"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'type Ball @createModel(accountRelation: LIST, description: "A ball to display") {\n  creator: DID! @accountReference\n  red: Int\n  green: Int\n  blue: Int\n  radius: Float\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You will then save this to a file, such as ",(0,t.jsx)(n.code,{children:"ball.graphql"}),". You can then add the model and get the id."]}),"\n",(0,t.jsxs)(n.p,{children:["composedb composite",":create"," --output ball.json ball.graphql\ncat ball.json | jq '.models | keys_unsorted[0]'"]}),"\n",(0,t.jsx)(n.p,{children:"Next, create the SDL for your container, without references to items"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'type World @createModel(accountRelation: LIST, description: "Ball World") {\n  name: String! @string(minLength: 3, maxLength: 50)\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Save this to a file and add as above. Then we will create a model to relate our item and container"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'type Ball @loadModel(id: "<id of ball>") {\n  id: ID!\n}\n\ntype World @loadModel(id: "<id of world>"){\n  id: ID!\n}\n\ntype BallRelation @createModel(accountRelation: LIST, description: "Relate a ball to our world") {\n  ballID: StreamID! @documentReference(model: "Ball")\n  ball: Ball! @relationDocument(property: "ballID")\n  worldID: StreamID! @documentReference(model: "World")\n  world: World! @relationDocument(property: "worldID")\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"For the relation, the ID will likely be the last model id. Finally, relate our container to our items"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'type BallRelation @loadModel(id: "<id of ball relation>") {\n  id: ID!\n}\n\ntype World @loadModel(id: "<id of world>") {\n  balls: [BallRelation] @relationFrom(model: "BallRelation", property: "worldID")\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["This is a view on top of the models, so you cannot require your items, such as with ",(0,t.jsx)(n.code,{children:"balls: [BallRelation!]"})]})}),"\n",(0,t.jsx)(n.p,{children:"We can now merge all of these and deploy them as a composite."}),"\n",(0,t.jsxs)(n.p,{children:["composedb composite",":merge"," ball.json world.json ball_relation.json world_relation.json --output=merged.json\ncomposedb composite",":deploy"," merged.json\ncomposedb composite",":compile"," merged.json runtime.json"]}),"\n",(0,t.jsx)(n.p,{children:"Our composite is now ready to use. We can use it with graphiql"}),"\n",(0,t.jsxs)(n.p,{children:["composedb graphql",":server"," --graphiql runtime.json"]}),"\n",(0,t.jsx)(n.h2,{id:"inserting-data",children:"Inserting Data"}),"\n",(0,t.jsx)(n.p,{children:"We can create an item with mutation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"mutation CreateNewBall($i: CreateBallInput!){\n  createBall(input: $i){\n    document {\n      id\n      radius\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"and variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'{\n  "i": {\n    "content": {\n      "creator": "<some did key>",\n      "radius": 45,\n      "red": 10,\n      "green": 20,\n      "blue": 30\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"We can create a container with mutation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"mutation CreateNewWorld($i: CreateWorldInput!){\n  createWorld(input: $i){\n    document {\n      id\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"and variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'{\n  "i": {\n    "content": {\n      "name": "test-world",\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Finally we can define relations between items and the container with mutation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"mutation CreateBallRelation($i: CreateBallRelationInput!){\n  createBallRelation(input: $i){\n    document {\n      id\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"and variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'{\n  "i": {\n    "content": {\n      "ballID": "<id from ball mutation>",\n      "worldID": "<id from world mutation>"\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"query-the-data",children:"Query The Data"}),"\n",(0,t.jsx)(n.p,{children:"We can query for the container for the items, and from that find the items."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"query {\n  worldIndex(first: 1) {\n    edges {\n      node {\n        id\n        name\n        balls(first: 5) {\n          edges {\n            node {\n              id\n              ballID\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},63883:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>r});var t=a(50959);const l={},o=t.createContext(l);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);