"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6106],{49277:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>c});var s=r(11527),n=r(63883);const d={},o="Key DID libraries",t={id:"protocol/js-ceramic/guides/ceramic-clients/authentication/key-did",title:"Key DID libraries",description:"---",source:"@site/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/key-did.md",sourceDirName:"protocol/js-ceramic/guides/ceramic-clients/authentication",slug:"/protocol/js-ceramic/guides/ceramic-clients/authentication/key-did",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/key-did",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"DID JSON-RPC client",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc"},next:{title:"Module: did-session",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-session"}},l={},c=[{value:"Available libraries",id:"available-libraries",level:2},{value:"Key DID resolver",id:"key-did-resolver",level:2},{value:"Installation",id:"installation",level:3},{value:"Usage",id:"usage",level:3},{value:"Key DID providers",id:"key-did-providers",level:2},{value:"Key DID provider ED25519",id:"key-did-provider-ed25519",level:2},{value:"Installation",id:"installation-1",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Key DID provider secp256k1",id:"key-did-provider-secp256k1",level:2},{value:"Installation",id:"installation-2",level:3},{value:"Usage",id:"usage-2",level:3}];function a(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"key-did-libraries",children:"Key DID libraries"}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsxs)(i.p,{children:["The Key DID libraries include the ",(0,s.jsx)(i.a,{href:"#key-did-resolver",children:"resolver"})," and ",(0,s.jsx)(i.a,{href:"#key-did-providers",children:"multiple providers"})," to provide a simple way for developers to get started using the ",(0,s.jsx)(i.a,{href:"/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc",children:"DID client"})," with the ",(0,s.jsx)(i.code,{children:"did:key"})," method."]}),"\n",(0,s.jsx)(i.h2,{id:"available-libraries",children:"Available libraries"}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["The ",(0,s.jsx)(i.a,{href:"#key-did-resolver",children:"Key DID resolver"})," allows a DID JSON-RPC client to resolve accounts using the ",(0,s.jsx)(i.code,{children:"did:key"})," method"]}),"\n",(0,s.jsxs)(i.li,{children:["The ",(0,s.jsx)(i.a,{href:"#key-did-provider-ed25519",children:"Key DID provider ED25519"})," allows applications to create and use Key DID accounts for ED25519 keypairs. This provider supports encryption."]}),"\n",(0,s.jsxs)(i.li,{children:["The ",(0,s.jsx)(i.a,{href:"#key-did-provider-secp256k1",children:"Key DID provider secp256k1"})," allows applications to create and use Key DID accounts for secp256k1 keypairs. This provider does not supports encryption."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"key-did-resolver",children:"Key DID resolver"}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"key-did-resolver"})," module is needed to resolve DID documents using the ",(0,s.jsx)(i.code,{children:"did:key"})," method."]}),"\n",(0,s.jsx)(i.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sh",children:"npm install key-did-resolver\n"})}),"\n",(0,s.jsx)(i.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-ts",children:"import { DID } from 'dids'\nimport { getResolver } from 'key-did-resolver'\n\nasync function resolveDID() {\n  const did = new DID({ resolver: getResolver() })\n  return await did.resolve('did:key:...')\n}\n"})}),"\n",(0,s.jsx)(i.h2,{id:"key-did-providers",children:"Key DID providers"}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsxs)(i.p,{children:["Different libraries implement a provider for the ",(0,s.jsx)(i.code,{children:"did:key"})," method based on different cryptographic primitives. These providers may have different possibilities, for example ",(0,s.jsx)(i.code,{children:"key-did-provider-ed25519"})," supports encryption while ",(0,s.jsx)(i.code,{children:"key-did-provider-secp256k1"})," does not."]}),"\n",(0,s.jsx)(i.h2,{id:"key-did-provider-ed25519",children:"Key DID provider ED25519"}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsxs)(i.p,{children:["This is the ",(0,s.jsx)(i.strong,{children:"recommended provider"})," for the ",(0,s.jsx)(i.code,{children:"key:did"})," method in most cases."]}),"\n",(0,s.jsx)(i.h3,{id:"installation-1",children:"Installation"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sh",children:"npm install key-did-provider-ed25519\n"})}),"\n",(0,s.jsx)(i.h3,{id:"usage-1",children:"Usage"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-ts",children:"import { DID } from 'dids'\nimport { Ed25519Provider } from 'key-did-provider-ed25519'\nimport { getResolver } from 'key-did-resolver'\n\n// `seed` must be a 32-byte long Uint8Array\nasync function authenticateDID(seed) {\n  const provider = new Ed25519Provider(seed)\n  const did = new DID({ provider, resolver: getResolver() })\n  await did.authenticate()\n  return did\n}\n"})}),"\n",(0,s.jsx)(i.h2,{id:"key-did-provider-secp256k1",children:"Key DID provider secp256k1"}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsxs)(i.p,{children:["This provider ",(0,s.jsx)(i.em,{children:"does not support encryption"}),", so using methods such as ",(0,s.jsx)(i.code,{children:"createJWE"})," on the ",(0,s.jsx)(i.code,{children:"DID"})," instance is not supported."]}),"\n",(0,s.jsx)(i.h3,{id:"installation-2",children:"Installation"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sh",children:"npm install key-did-provider-secp256k1\n"})}),"\n",(0,s.jsx)(i.h3,{id:"usage-2",children:"Usage"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-ts",children:"import { DID } from 'dids'\nimport { Secp256k1Provider } from 'key-did-provider-secp256k1'\nimport { getResolver } from 'key-did-resolver'\n\n// `seed` must be a 32-byte long Uint8Array\nasync function authenticateDID(seed) {\n  const provider = new Secp256k1Provider(seed)\n  const did = new DID({ provider, resolver: getResolver() })\n  await did.authenticate()\n  return did\n}\n"})})]})}function h(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},63883:(e,i,r)=>{r.d(i,{Z:()=>t,a:()=>o});var s=r(50959);const n={},d=s.createContext(n);function o(e){const i=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(d.Provider,{value:i},e.children)}}}]);