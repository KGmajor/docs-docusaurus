"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9146],{9613:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>h});var r=a(9496);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),m=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=m(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=m(a),d=n,h=p["".concat(c,".").concat(d)]||p[d]||u[d]||s;return a?r.createElement(h,o(o({ref:t},l),{},{components:a})):r.createElement(h,o({ref:t},l))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:n,o[1]=i;for(var m=2;m<s;m++)o[m]=a[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8478:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>m});var r=a(7605),n=(a(9496),a(9613));const s={},o="Queries",i={unversionedId:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients/queries",id:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients/queries",title:"Queries",description:"This guide demonstrates how to query streams during runtime using the JS HTTP and JS Core clients.",source:"@site/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/queries.md",sourceDirName:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients",slug:"/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/queries",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/queries",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"Ceramic HTTP client",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http"},next:{title:"Pinning",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/pinning"}},c={},m=[{value:"<strong>Requirements</strong>",id:"requirements",level:2},{value:"<strong>Query a stream</strong>",id:"query-a-stream",level:2},{value:"<strong>Query a stream at a specific commit</strong>",id:"query-a-stream-at-a-specific-commit",level:2},{value:"<strong>Query multiple streams</strong>",id:"query-multiple-streams",level:2},{value:"<strong>Query a stream using paths</strong>",id:"query-a-stream-using-paths",level:2},{value:"<strong>Helper methods</strong>",id:"helper-methods",level:2},{value:"Get StreamID",id:"get-streamid",level:3},{value:"Get latest commit",id:"get-latest-commit",level:3},{value:"Get all anchor commits",id:"get-all-anchor-commits",level:3}],l={toc:m},p="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"queries"},"Queries"),(0,n.kt)("p",null,"This guide demonstrates how to query streams during runtime using the ",(0,n.kt)("a",{parentName:"p",href:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http"},"JS HTTP")," and JS Core clients."),(0,n.kt)("h2",{id:"requirements"},(0,n.kt)("strong",{parentName:"h2"},"Requirements")),(0,n.kt)("p",null,"You need to have an ",(0,n.kt)("a",{parentName:"p",href:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http"},"installed client")," to perform queries during runtime."),(0,n.kt)("h2",{id:"query-a-stream"},(0,n.kt)("strong",{parentName:"h2"},"Query a stream")),(0,n.kt)("p",null,"Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"loadStream()")," method to load a single stream using its ",(0,n.kt)("em",{parentName:"p"},"StreamID"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const streamId = 'kjzl6cwe1jw14...'\nconst stream = await ceramic.loadStream(streamId)\n")),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre"},"When using the Typescript APIs, `loadStream` by default returns an object of type `Stream`, which will not have any methods available to perform updates, or any other streamtype-specific methods or accessors.  To be able to perform updates, as well as to access streamtype-specific data or functionality, you need to specialize the `loadStream` method on the StreamType of the Stream being loaded.\n"))),(0,n.kt)("h2",{id:"query-a-stream-at-a-specific-commit"},(0,n.kt)("strong",{parentName:"h2"},"Query a stream at a specific commit")),(0,n.kt)("p",null,"If you want to see the contents of a stream as of a specific point in time, it's possible to pass a ",(0,n.kt)("em",{parentName:"p"},"CommitID")," instead of a ",(0,n.kt)("em",{parentName:"p"},"StreamID")," to the ",(0,n.kt)("inlineCode",{parentName:"p"},"loadStream()")," method described above. This will cause the Stream to be loaded at the specified commit, rather than the current commit as loaded from the network. When loading with a CommitID, the returned Stream object will be marked as readonly and cannot be used to perform updates. If you wish to perform updates, load a new instance of the Stream using its StreamID."),(0,n.kt)("h2",{id:"query-multiple-streams"},(0,n.kt)("strong",{parentName:"h2"},"Query multiple streams")),(0,n.kt)("p",null,"Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"multiQuery()")," method to load multiple streams at once. The returned object is a map from ",(0,n.kt)("em",{parentName:"p"},"StreamIDs")," to stream instances."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const queries = [\n  {\n    streamId: 'kjzl6cwe1jw...14',\n  },\n  {\n    streamId: 'kjzl6cwe1jw...15',\n  },\n]\nconst streamMap = await ceramic.multiQuery(queries)\n")),(0,n.kt)("h2",{id:"query-a-stream-using-paths"},(0,n.kt)("strong",{parentName:"h2"},"Query a stream using paths")),(0,n.kt)("p",null,"Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"multiQuery()")," method to load one or more streams using known paths from a root stream to its linked streams."),(0,n.kt)("p",null,"Imagine a stream ",(0,n.kt)("inlineCode",{parentName:"p"},"kjzl6cwe1jw...14")," whose content contains the StreamIDs of two other streams. These StreamIDs exist at various levels within a nested JSON structure."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n  a: 'kjzl6cwe1jw...15',\n  b: {\n    c: 'kjzl6cwe1jw...16'\n  }\n}\n")),(0,n.kt)("p",null,"In the stream above, the path from root stream ",(0,n.kt)("inlineCode",{parentName:"p"},"kjzl6cwe1jw...14")," to linked stream ",(0,n.kt)("inlineCode",{parentName:"p"},"kjzl6cwe1jw...15")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"/a")," and the path to linked stream ",(0,n.kt)("inlineCode",{parentName:"p"},"kjzl6cwe1jw...16")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"/b/c"),". Using the StreamID of the root stream and the paths outlined here, we use ",(0,n.kt)("inlineCode",{parentName:"p"},"multiQuery()")," to query all three streams at once without needing to explicitly know the StreamIDs of the two linked streams."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"multiQuery()")," below will return a map with all three streams."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const queries = [{\n  streamId: 'kjzl6cwe1jw...14'\n  paths: ['/a', '/b/c']\n}]\nconst streamMap = await ceramic.multiQuery(queries)\n")),(0,n.kt)("h2",{id:"helper-methods"},(0,n.kt)("strong",{parentName:"h2"},"Helper methods")),(0,n.kt)("p",null,"To get specific information about the stream that you created or loaded you can use the accessors on the ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream")," class. Below are some examples."),(0,n.kt)("h3",{id:"get-streamid"},"Get StreamID"),(0,n.kt)("p",null,"Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"stream.id")," property to get the unique ",(0,n.kt)("inlineCode",{parentName:"p"},"StreamID")," for this stream."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const streamId = stream.id\n")),(0,n.kt)("h3",{id:"get-latest-commit"},"Get latest commit"),(0,n.kt)("p",null,"Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"stream.commitId")," property to get latest CommitID of a stream."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const commitId = stream.commitId\n")),(0,n.kt)("h3",{id:"get-all-anchor-commits"},"Get all anchor commits"),(0,n.kt)("p",null,"Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"stream.anchorCommitIds")," property to get all CommitIDs which are anchor commits for this stream."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const anchorCommits = stream.anchorCommitIds\n")))}u.isMDXComponent=!0}}]);