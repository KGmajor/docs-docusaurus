"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9930],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=u(n),h=o,m=l["".concat(c,".").concat(h)]||l[h]||p[h]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3325:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7605),o=(n(9496),n(9613));const a={},i="Authorization",s={unversionedId:"dids/authorization",id:"dids/authorization",title:"Authorization",description:"Authorize and then use DIDs where needed. At the moment, Ethereum and Solana accounts",source:"@site/docs/dids/authorization.md",sourceDirName:"dids",slug:"/dids/authorization",permalink:"/docs-docusaurus/docs/dids/authorization",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"dids",previous:{title:"Installation",permalink:"/docs-docusaurus/docs/dids/installation"},next:{title:"Configuration",permalink:"/docs-docusaurus/docs/dids/configuration"}},c={},u=[],d={toc:u},l="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"authorization"},"Authorization"),(0,o.kt)("p",null,"Authorize and then use DIDs where needed. At the moment, Ethereum and Solana accounts\nare supported. Reference the chain/network specific libraries for more info on how to\nuse each. Additional accounts will be supported in the future. "),(0,o.kt)("p",null,"Authorize with an Ethereum account using ",(0,o.kt)("a",{parentName:"p",href:"https://did.js.org/docs/api/modules/pkh_ethereum"},"@didtools/pkh-ethereum"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { DIDSession } from 'did-session'\nimport { EthereumWebAuth, getAccountId } from '@didtools/pkh-ethereum'\n\nconst ethProvider = // import/get your web3 eth provider\nconst addresses = await ethProvider.request({ method: 'eth_requestAccounts' })\nconst accountId = await getAccountId(ethProvider, addresses[0])\nconst authMethod = await EthereumWebAuth.getAuthMethod(ethprovider, accountId)\n\nconst session = await DIDSession.get(accountId, authMethod, { resources: [...]})\n")),(0,o.kt)("p",null,"Authorize with a Solana account using ",(0,o.kt)("a",{parentName:"p",href:"https://did.js.org/docs/api/modules/pkh_solana"},"@didtools/pkh-solana"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { DIDSession } from 'did-session'\nimport { SolanaWebAuth, getAccountIdByNetwork } from '@didtools/pkh-solana'\n\nconst solProvider = // import/get your Solana provider (ie: window.phantom.solana)\nconst address = await solProvider.connect()\nconst accountId = getAccountIdByNetwork('mainnet', address.publicKey.toString())\nconst authMethod = await SolanaWebAuth.getAuthMethod(solProvider, accountId)\n\nconst session = await DIDSession.get(accountId, authMethod, { resources: [...]})\n")),(0,o.kt)("p",null,"With your session, use DIDs in composedb, ceramic & glaze libraries:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ceramic = new CeramicClient()\nceramic.did = session.did\n")))}p.isMDXComponent=!0}}]);