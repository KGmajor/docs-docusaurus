"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2731],{9613:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(9496);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(f,a(a({ref:t},l),{},{components:r})):n.createElement(f,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4960:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(7605),o=(r(9496),r(9613));const i={},a="Networking",s={unversionedId:"protocol/js-ceramic/networking/networking-index",id:"protocol/js-ceramic/networking/networking-index",title:"Networking",description:"Networking sub-protocols for Ceramic",source:"@site/docs/protocol/js-ceramic/networking/networking-index.md",sourceDirName:"protocol/js-ceramic/networking",slug:"/protocol/js-ceramic/networking/networking-index",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/networking/networking-index",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"Object Capabilities",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/accounts/object-capabilities"},next:{title:"Networks",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/networking/networks"}},c={},p=[{value:"Overview",id:"overview",level:3},{value:"Networks",id:"networks",level:3},{value:"Tip Gossip",id:"tip-gossip",level:3},{value:"Tip Queries",id:"tip-queries",level:3},{value:"Event Fetching",id:"event-fetching",level:3}],l={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"networking"},"Networking"),(0,o.kt)("p",null,"Networking sub-protocols for Ceramic"),(0,o.kt)("h3",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Ceramic streams and nodes are grouped into independent networks. These networks can be either for public use or for use by a specific community. There are currently a few commonly shared and default networks. When a stream is published in a network, other nodes in the same network are able to query and discover the stream, receive the latest stream events (tips), and sync the entire event set for a stream. Each of the these network functions are defined by a sub protocol listed below."),(0,o.kt)("h3",{id:"networks"},(0,o.kt)("a",{parentName:"h3",href:"/docs-docusaurus/docs/protocol/js-ceramic/networking/networks"},"Networks")),(0,o.kt)("p",null,"Networks are collections of Ceramic ",(0,o.kt)("a",{parentName:"p",href:"/docs-docusaurus/docs/protocol/js-ceramic/nodes"},"nodes")," that share specific configurations and communicate over dedicated ",(0,o.kt)("a",{parentName:"p",href:"https://libp2p.io/"},"libp2p")," pubsub topics. They are easily identified by a path string, for example ",(0,o.kt)("inlineCode",{parentName:"p"},"/ceramic/mainnet")," ."),(0,o.kt)("h3",{id:"tip-gossip"},(0,o.kt)("a",{parentName:"h3",href:"/docs-docusaurus/docs/protocol/js-ceramic/networking/tip-gossip"},"Tip Gossip")),(0,o.kt)("p",null,"When a stream is updated, the latest event (tip) is gossiped and propagated out to all the nodes in a network that are interested in that particular stream. Listening for all tips, allows a node to learn about streams it did not know about. "),(0,o.kt)("h3",{id:"tip-queries"},(0,o.kt)("a",{parentName:"h3",href:"/docs-docusaurus/docs/protocol/js-ceramic/networking/tip-queries"},"Tip Queries")),(0,o.kt)("p",null,"Nodes in a network with a specific StreamId can query for the most recent event (tip) of that given stream. Queries enable a node that know about a stream to find the latest event (tip). "),(0,o.kt)("h3",{id:"event-fetching"},(0,o.kt)("a",{parentName:"h3",href:"/docs-docusaurus/docs/protocol/js-ceramic/networking/event-fetching"},"Event Fetching")),(0,o.kt)("p",null,"Nodes that have the tip (latest event) of a stream, can use the tip to fetch all prior events in that stream.  Fetching enables a node that knows a tip to sync the entire event set for a stream and learn its latest state."))}d.isMDXComponent=!0}}]);