"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7786],{9613:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,h=p["".concat(s,".").concat(d)]||p[d]||u[d]||i;return n?a.createElement(h,c(c({ref:t},m),{},{components:n})):a.createElement(h,c({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,c[1]=o;for(var l=2;l<i;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8988:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(7605),r=(n(9496),n(9613));const i={},c="Ceramic HTTP client",o={unversionedId:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",id:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",title:"Ceramic HTTP client",description:"The Ceramic HTTP client library can be used in browsers and Node.js to connect your application to a Ceramic node. It is actively maintained and supports the latest Ceramic features.",source:"@site/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http.md",sourceDirName:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients",slug:"/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"Running Ceramic in production",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-nodes/running-cloud"},next:{title:"Queries",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/queries"}},s={},l=[{value:"Things to know",id:"things-to-know",level:2},{value:"Installation",id:"installation",level:2},{value:"Common use-cases",id:"common-use-cases",level:2},{value:"Load a single stream",id:"load-a-single-stream",level:3},{value:"Load multiple streams",id:"load-multiple-streams",level:3},{value:"Enable transactions",id:"enable-transactions",level:3}],m={toc:l},p="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ceramic-http-client"},"Ceramic HTTP client"),(0,r.kt)("p",null,"The Ceramic HTTP client library can be used in browsers and Node.js to connect your application to a Ceramic node. It is actively maintained and supports the latest Ceramic features."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Verse",src:n(2083).Z,width:"1808",height:"1014"})),(0,r.kt)("h2",{id:"things-to-know"},"Things to know"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The client is read-only by default, to enable transactions a ",(0,r.kt)("a",{parentName:"li",href:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc"},"DID client")," needs to be attached to the Ceramic client instance."),(0,r.kt)("li",{parentName:"ul"},"Ceramic streams can be identified by a ",(0,r.kt)("strong",{parentName:"li"},"stream ID")," or a ",(0,r.kt)("strong",{parentName:"li"},"commit ID"),". A ",(0,r.kt)("strong",{parentName:"li"},"stream ID")," is generated when creating the stream and can be used to load the ",(0,r.kt)("strong",{parentName:"li"},"latest version")," of the stream, while a ",(0,r.kt)("strong",{parentName:"li"},"commit ID")," represents a ",(0,r.kt)("strong",{parentName:"li"},"specific version")," of the stream.")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @ceramicnetwork/http-client\n")),(0,r.kt)("h2",{id:"common-use-cases"},"Common use-cases"),(0,r.kt)("h3",{id:"load-a-single-stream"},"Load a single stream"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Import the client\nimport { CeramicClient } from '@ceramicnetwork/http-client'\n\n// Connect to a Ceramic node\nconst ceramic = new CeramicClient('https://your-ceramic-node.com')\n\n// The `id` argument can be a stream ID (to load the latest version)\n// or a commit ID (to load a specific version)\nasync function load(id) {\n  return await ceramic.loadStream(id)\n}\n")),(0,r.kt)("h3",{id:"load-multiple-streams"},"Load multiple streams"),(0,r.kt)("p",null,"Rather than using the ",(0,r.kt)("inlineCode",{parentName:"p"},"loadStream")," method multiple times with ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.all()")," to load multiple streams at once, a ",(0,r.kt)("strong",{parentName:"p"},"more efficient way for loading multiple streams")," is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"multiQuery")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Import the client\nimport { CeramicClient } from '@ceramicnetwork/http-client'\n\n// Connect to a Ceramic node\nconst ceramic = new CeramicClient('https://your-ceramic-node.com')\n\n// The `ids` argument can contain an arry of stream IDs (to load the latest version)\n// or commit IDs (to load a specific version)\nasync function loadMulti(ids = []) {\n  const queries = ids.map((streamId) => ({ streamId }))\n  // This will return an Object of stream ID keys to stream values\n  return await ceramic.multiQuery(queries)\n}\n")),(0,r.kt)("h3",{id:"enable-transactions"},"Enable transactions"),(0,r.kt)("p",null,"In order to create and update streams, the Ceramic client instance must be able to sign transaction payloads by using an authenticated DID instance. The ",(0,r.kt)("a",{parentName:"p",href:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc"},"DID client documentation")," describes the process of authenticating and attaching a DID instance to the Ceramic instance."))}u.isMDXComponent=!0},2083:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verse-f12cb1961ba454832fe048464601fa0f.png"}}]);