"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[214],{49628:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>r});var a=t(11527),l=t(63883);const o={},i="Example: Container of Items",s={id:"composedb/guides/data-modeling/relations-combine-items",title:"Example: Container of Items",description:"Creating the Models",source:"@site/docs/composedb/guides/data-modeling/relations-combine-items.mdx",sourceDirName:"composedb/guides/data-modeling",slug:"/composedb/guides/data-modeling/relations-combine-items",permalink:"/docs/composedb/guides/data-modeling/relations-combine-items",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{}},c={},r=[{value:"Creating the Models",id:"creating-the-models",level:2},{value:"Inserting Data",id:"inserting-data",level:2},{value:"Query The Data",id:"query-the-data",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"example-container-of-items",children:"Example: Container of Items"}),"\n",(0,a.jsx)(n.h2,{id:"creating-the-models",children:"Creating the Models"}),"\n",(0,a.jsx)(n.p,{children:"First, create the SDL for the first model to be combined"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'type Ball @createModel(accountRelation: LIST, description: "A ball to display") {\n  creator: DID! @accountReference\n  red: Int\n  green: Int\n  blue: Int\n  radius: Float\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You will then save this to a file, such as ",(0,a.jsx)(n.code,{children:"ball.graphql"}),". You can then add the model and get the id."]}),"\n",(0,a.jsxs)(n.p,{children:["composedb composite",":create"," --output ball.json ball.graphql\ncat ball.json | jq '.models | keys_unsorted[0]'"]}),"\n",(0,a.jsxs)(n.p,{children:["Now we need a second model that will ",(0,a.jsx)(n.em,{children:"combine"})," with the first model"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'type Obstacle @createModel(accountRelation: LIST, description: "An obstacle a ball can collide with") {\n  creator: DID! @accountReference\n  x: Int\n  y: Int\n  z: Int\n  length: Int\n  width: Int\n  height: Int\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Next, we're going to combine the existing models into a new model"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'type Ball @loadModel(id: "<id of ball>") {\n  id: ID!\n}\n\ntype Obstacle @loadModel(id: "<id of obstacle>"){\n  id: ID!\n}\n\ntype Collision @createModel(accountRelation: LIST, description: "Collision between ball and object") {\n  ballID: StreamID! @documentReference(model: "Ball")\n  ball: Ball! @relationDocument(property: "ballID")\n  obstacleID: StreamID! @documentReference(model: "Obstacle")\n  obstacle: Ball! @relationDocument(property: "ballID")\n  x: Int\n  y: Int\n  z: Int\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Save this to a file and add as above."}),"\n",(0,a.jsx)(n.p,{children:"We can now merge all of these and deploy them as a composite."}),"\n",(0,a.jsxs)(n.p,{children:["composedb composite",":merge"," ball.json obstacle.json collision.json --output=merged.json\ncomposedb composite",":deploy"," merged.json\ncomposedb composite",":compile"," merged.json runtime.json"]}),"\n",(0,a.jsx)(n.p,{children:"Our composite is now ready to use. We can use it with graphiql"}),"\n",(0,a.jsxs)(n.p,{children:["composedb graphql",":server"," --graphiql runtime.json"]}),"\n",(0,a.jsx)(n.h2,{id:"inserting-data",children:"Inserting Data"}),"\n",(0,a.jsx)(n.p,{children:"We can create an item with mutation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"mutation CreateNewBall($i: CreateBallInput!){\n  createBall(input: $i){\n    document {\n      id\n      radius\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"and variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'{\n  "i": {\n    "content": {\n      "creator": "<some did key>",\n      "radius": 45,\n      "red": 10,\n      "green": 20,\n      "blue": 30\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"We can create a second object with a mutation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"mutation CreateNewObstacle($i: CreateObstacleInput!){\n  createObstacle(input: $i){\n    document {\n      id\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"and variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'{\n  "i": {\n    "content": {\n      "creator": "<some did key>"\n      "x": 1\n      "y": 2\n      "z": 3\n      "length": 4\n      "width": 5\n      "height": 6\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Finally we can define the resultant object from combining items"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"mutation CreateCollision($i: CreateCollisionInput!){\n  createCollision(input: $i){\n    document {\n      id\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"and variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'{\n  "i": {\n    "content": {\n      "ballID": "<id from ball mutation>",\n      "obstacleID": "<id from obstacle mutation>"\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"query-the-data",children:"Query The Data"}),"\n",(0,a.jsx)(n.p,{children:"We can query for the combined item"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"query {\n  collisionIndex(first:5) {\n    edges {\n      node {\n        id\n        ball {\n          id\n          radius\n        }\n        obstacle {\n          id\n        }\n      }\n    }\n  }\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},63883:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var a=t(50959);const l={},o=a.createContext(l);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);