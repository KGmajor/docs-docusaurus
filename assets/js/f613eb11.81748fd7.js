"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8606],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),p=a,h=d["".concat(l,".").concat(p)]||d[p]||m[p]||r;return n?i.createElement(h,c(c({ref:t},u),{},{components:n})):i.createElement(h,c({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:a,c[1]=o;for(var s=2;s<r;s++)c[s]=n[s];return i.createElement.apply(null,c)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2632:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var i=n(7605),a=(n(9496),n(9613));const r={},c="CAIP-10 Link client",o={unversionedId:"protocol/js-ceramic/guides/ceramic-clients/stream-api/caip10-link",id:"protocol/js-ceramic/guides/ceramic-clients/stream-api/caip10-link",title:"CAIP-10 Link client",description:"---",source:"@site/docs/protocol/js-ceramic/guides/ceramic-clients/stream-api/caip10-link.md",sourceDirName:"protocol/js-ceramic/guides/ceramic-clients/stream-api",slug:"/protocol/js-ceramic/guides/ceramic-clients/stream-api/caip10-link",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/stream-api/caip10-link",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"Module: did-session",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-session"},next:{title:"Streams",permalink:"/docs-docusaurus/docs/protocol/js-ceramic/streams/streams-index"}},l={},s=[{value:"Installation",id:"installation",level:2},{value:"Additional requirements",id:"additional-requirements",level:3},{value:"Common usage",id:"common-usage",level:2},{value:"Load a link",id:"load-a-link",level:3},{value:"Create a link",id:"create-a-link",level:3},{value:"Remove a lin",id:"remove-a-lin",level:3}],u={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"caip-10-link-client"},"CAIP-10 Link client"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A CAIP-10 Link is a stream that stores a proof that links a blockchain address to a Ceramic account (DID), using the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md"},"CAIP-10 standard")," to represent blockchain addresses."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @ceramicnetwork/stream-caip10-link\n")),(0,a.kt)("h3",{id:"additional-requirements"},"Additional requirements"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In order to load CAIP-10 Links, a ",(0,a.kt)("a",{parentName:"li",href:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http"},"Ceramic client instance")," must be available"),(0,a.kt)("li",{parentName:"ul"},"To add/remove links, the client must also have an ",(0,a.kt)("a",{parentName:"li",href:"/docs-docusaurus/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc"},"authenticated DID")),(0,a.kt)("li",{parentName:"ul"},"An authentication provider is needed to sign the payload for the given CAIP-10 account, using the ",(0,a.kt)("inlineCode",{parentName:"li"},"blockchain-utils-linking")," module that should be installed as needed:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @ceramicnetwork/blockchain-utils-linking\n")),(0,a.kt)("h2",{id:"common-usage"},"Common usage"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"load-a-link"},"Load a link"),(0,a.kt)("p",null,"In this example we load a Caip10Link for the account ",(0,a.kt)("inlineCode",{parentName:"p"},"0x054...7cb8")," on the Ethereum mainnet blockchain (",(0,a.kt)("inlineCode",{parentName:"p"},"eip155:1"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Caip10Link } from '@ceramicnetwork/stream-caip10-link'\n\nconst ceramic = new CeramicClient()\n\nasync function getLinkedDID() {\n  // Using the Ceramic client instance, we can load the link for a given CAIP-10 account\n  const link = await Caip10Link.fromAccount(\n    ceramic,\n    '0x0544dcf4fce959c6c4f3b7530190cb5e1bd67cb8@eip155:1',\n  )\n  // The `did` property of the loaded link will contain the DID string value if set\n  return link.did\n}\n")),(0,a.kt)("h3",{id:"create-a-link"},"Create a link"),(0,a.kt)("p",null,"Here we can see the full flow of getting a user's Ethereum address, creating a link, and adding the users' DID account."),(0,a.kt)("p",null,"In this example we create a Caip10Link for the account ",(0,a.kt)("inlineCode",{parentName:"p"},"0x054...7cb8")," on the Ethereum mainnet blockchain (",(0,a.kt)("inlineCode",{parentName:"p"},"eip155:1"),") and then associate it with the DID ",(0,a.kt)("inlineCode",{parentName:"p"},"did:3:k2t6...ydki"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Caip10Link } from '@ceramicnetwork/stream-caip10-link'\nimport { EthereumAuthProvider } from '@ceramicnetwork/blockchain-utils-linking'\n\nconst ceramic = new CeramicClient()\n\nasync function linkCurrentAddress() {\n  // First, we need to create an EthereumAuthProvider with the account currently selected\n  // The following assumes there is an injected `window.ethereum` provider\n  const addresses = await window.ethereum.request({\n    method: 'eth_requestAccounts',\n  })\n  const authProvider = new EthereumAuthProvider(window.ethereum, addresses[0])\n\n  // Retrieve the CAIP-10 account from the EthereumAuthProvider instance\n  const accountId = await authProvider.accountId()\n\n  // Load the account link based on the account ID\n  const accountLink = await Caip10Link.fromAccount(\n    ceramic,\n    accountId.toString(),\n  )\n\n  // Finally, link the DID to the account using the EthereumAuthProvider instance\n  await accountLink.setDid(\n    'did:3:k2t6wyfsu4pg0t2n4j8ms3s33xsgqjhtto04mvq8w5a2v5xo48idyz38l7ydki',\n    authProvider,\n  )\n}\n")),(0,a.kt)("h3",{id:"remove-a-lin"},"Remove a lin"),(0,a.kt)("p",null,"Removing a link involves a similar flow to setting the DID, but using the ",(0,a.kt)("inlineCode",{parentName:"p"},"clearDid")," method instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"setDid"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Caip10Link } from '@ceramicnetwork/stream-caip10-link'\nimport { EthereumAuthProvider } from '@ceramicnetwork/blockchain-utils-linking'\n\nconst ceramic = new CeramicClient()\n\nasync function unlinkCurrentAddress() {\n  // First, we need to create an EthereumAuthProvider with the account currently selected\n  // The following assumes there is an injected `window.ethereum` provider\n  const addresses = await window.ethereum.request({\n    method: 'eth_requestAccounts',\n  })\n  const authProvider = new EthereumAuthProvider(window.ethereum, addresses[0])\n\n  // Retrieve the CAIP-10 account from the EthereumAuthProvider instance\n  const accountId = await authProvider.accountId()\n\n  // Load the account link based on the account ID\n  const accountLink = await Caip10Link.fromAccount(\n    ceramic,\n    accountId.toString(),\n  )\n\n  // Finally, unlink the DID from the account using the EthereumAuthProvider instance\n  await accountLink.clearDid(authProvider)\n}\n")))}m.isMDXComponent=!0}}]);