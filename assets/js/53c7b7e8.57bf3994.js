(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[787],{2259:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>f,default:()=>x,frontMatter:()=>h,metadata:()=>g,toc:()=>y});var s=t(7605),i=t(9496),o=t(9613),r=t(417),a=t(7238),d=t(5061),l=t(1988);const c={models:{BasicProfile:{id:"kjzl6hvfrbw6c8i6k87cma2gvbnw3hgz2j2tc0hmc6yzzc1zikbwsryulsnmmak",accountRelation:{type:"single"}},Posts:{id:"kjzl6hvfrbw6cags7lvf5ajsgdfqwnnhoyp5fr3fhmitskk0ksydeaspzxckpub",accountRelation:{type:"list"}},Following:{id:"kjzl6hvfrbw6c930807bvmzvcqkqv6ni1q2jhv5bc59hima9r9ci1zk22tpxq3v",accountRelation:{type:"list"}},Comments:{id:"kjzl6hvfrbw6cb3x190263pxlza37ls1gxizt1ea21gtr9xwp7qln05elotk0h8",accountRelation:{type:"list"}}},objects:{BasicProfile:{name:{type:"string",required:!0},emoji:{type:"string",required:!1},gender:{type:"string",required:!1},username:{type:"string",required:!0},description:{type:"string",required:!1},posts:{type:"view",viewType:"relation",relation:{source:"queryConnection",model:"kjzl6hvfrbw6cags7lvf5ajsgdfqwnnhoyp5fr3fhmitskk0ksydeaspzxckpub",property:"profileId"}},author:{type:"view",viewType:"documentAccount"}},Posts:{tag:{type:"string",required:!0,indexed:!0},body:{type:"string",required:!0},edited:{type:"datetime",required:!1,indexed:!0},created:{type:"datetime",required:!0,indexed:!0},profileId:{type:"streamid",required:!0},profile:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6c8i6k87cma2gvbnw3hgz2j2tc0hmc6yzzc1zikbwsryulsnmmak",property:"profileId"}},responses:{type:"view",viewType:"relation",relation:{source:"queryConnection",model:"kjzl6hvfrbw6cb3x190263pxlza37ls1gxizt1ea21gtr9xwp7qln05elotk0h8",property:"postId"}},author:{type:"view",viewType:"documentAccount"}},Following:{profileId:{type:"streamid",required:!0},profile:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6c8i6k87cma2gvbnw3hgz2j2tc0hmc6yzzc1zikbwsryulsnmmak",property:"profileId"}}},Comments:{edited:{type:"datetime",required:!1,indexed:!0},postId:{type:"streamid",required:!0},comment:{type:"string",required:!0},created:{type:"datetime",required:!0,indexed:!0},profileId:{type:"streamid",required:!0},post:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6cags7lvf5ajsgdfqwnnhoyp5fr3fhmitskk0ksydeaspzxckpub",property:"postId"}},profile:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6c8i6k87cma2gvbnw3hgz2j2tc0hmc6yzzc1zikbwsryulsnmmak",property:"profileId"}}}},enums:{},accountData:{basicProfile:{type:"node",name:"BasicProfile"},postsList:{type:"connection",name:"Posts"},followingList:{type:"connection",name:"Following"},commentsList:{type:"connection",name:"Comments"}}},p=async e=>{l.ZP.initialize("G-V2Y8T342EX");const n=new d.e({ceramic:"https://ceramic-temp.hirenodes.io",definition:c}),t=await n.executeQuery(`${e.query}`);if(console.log(t),t.errors&&l.ZP.event({category:"sandbox-query",action:"query-error"}),!t.data.__schema)return l.ZP.event({category:"sandbox-query",action:"query-success"}),t.data},u={profiles:{values:[{title:"Profile Index",query:"# gets the first 10 indexed BasicProfile instances\n\nquery ProfileIndex {\n  basicProfileIndex(first: 10) {\n    edges {\n      node {\n        id\n        author{\n          id\n        }\n        username\n        description\n        gender\n        emoji\n      }\n    }\n  }\n}"},{title:"Known Did",query:'# gets the BasicProfile instance (if exists) \n# known pkh:did (using chainID 1 for Eth Mainnet) \n\nquery KnownDid {\n  node(id: "did:pkh:eip155:1:0xc362c16a0dcbea78fb03a8f97f56deea905617bb") {\n  ... on CeramicAccount {\n        basicProfile {\n          id\n          name\n          username\n          description\n          gender\n          emoji\n        }\n      }\n  \t}\n\t}'},{title:"Profile with Posts",query:"# gets the first 10 indexed BasicProfile instances\n\n# gets the first 5 posts published by each of the \n# 10 BasicProfile instances (if exists)\n\nquery WithPosts {\n  basicProfileIndex(first: 10) {\n    edges {\n      node {\n        username\n        posts(first: 5) {\n          edges {\n            node {\n              body\n              created\n            }\n          }\n        }\n      }\n    }\n  }\n}"},{title:"Profile with Comments on Posts",query:"# gets the first 10 indexed BasicProfile instances\n\n# gets the first 5 posts published by each of the \n# 10 BasicProfile instances (if exists)\n\n# gets the first 10 responses corresponding to each\n# of the 5 posts (if exists) \n\n# gets the corresponding BasicProfile instance for\n# each response & prints only the username property \n\nquery WithComments {\n  basicProfileIndex(first: 10) {\n    edges {\n      node {\n        username\n        posts(first: 5) {\n          edges {\n            node {\n              body\n              created\n              responses(first: 10) {\n                edges {\n                  node {\n                    comment\n                    created\n                    profile {\n                      username\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"},{title:"Known Stream",query:'# gets the BasicProfile instance (if exists) \n# based on a known StreamID\n\nquery KnownStream {\n  node(id: "k2t6wzhkhabz3a7xz88mk93y1q2waejk1w2b5rs3kc82e42dgpe4l1h4mcibih") {\n    ... on BasicProfile {\n      id\n      username\n      description\n      gender\n      emoji\n    }\n  }\n}'}]},comments:{values:[{title:"Comments With Posts",query:"# gets the last 20 indexed Comments instances (if exists)\n\n# gets the corresponding Posts instance that the comment\n# is responding to\n\n# gets the BasicProfile instance and its username property\n# corresponding to the Posts instance\n\nquery CommentsWithPost {\n    commentsIndex(last: 20) {\n      edges {\n        node {\n          comment\n          post {\n            body\n            profile {\n              username\n            }\n          }\n        }\n      }\n    }\n  }"},{title:"Ordered Comments",query:"# gets the first 10 indexed Comments instances (if exists)\n# based on sorting by each instance's created (date) field\n# in ascending order\n\n# gets the corresponding Posts instance that the comment\n# is responding to\n\n# gets the BasicProfile instance and its username property\n# corresponding to the Posts instance\n\nquery OrderedComments {\n    commentsIndex(sorting: { created: ASC }, first: 10) {\n      edges {\n        node {\n          comment\n          created\n          post {\n            body\n            profile {\n              username\n            }\n          }\n        }\n      }\n    }\n  }"}]},posts:{values:[{title:"Posts Index",query:"# gets the first 10 indexed Posts instances\n\n# gets the last 1 indexed Responses instance corresponding\n# to each of the 10 Posts instances (if exists)\n\n# gets the corresponding BasicProfile instance for\n# each response & prints only the username property \n\nquery PostsIndex{\n  postsIndex(first: 10) {\n    edges {\n      node {\n        id\n        body\n        tag\n        created\n        profile {\n          username\n        }\n        author{\n          id\n        }\n        responses(last: 1) {\n          edges {\n            node {\n              comment\n              created\n              profile {\n                username\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"},{title:"Known DID",query:'# gets the first 100 Posts instances (if exists) \n# for known pkh:did (using chainID 11155111 for Sepolia)\n\n# gets the BasicProfile instance corresponding to\n# each Posts instance\n\n# gets the first 5 Responses instances (if exists)\n# for each of the 100 Posts and prints both the\n# comment and created field\n\nquery KnownDid{\n  node(id: "did:pkh:eip155:11155111:0x8071f6f971b438f7c0ea72c950430ee7655fabce") {\n      ... on CeramicAccount {\n      id\n      postsList(first: 100) {\n        edges {\n        node {\n            id\n            body\n            created\n            profile {\n              username\n            }\n          \tresponses(first: 5){\n              edges{\n                node{\n                  comment\n                  created\n                }\n              }\n          \t}\n          }\n        }\n      }\n    } \n  }\n}'},{title:"Tag Filtered",query:'# gets the first 10 indexed Posts instances (if exists)\n# using a filter that grabs only the Posts instances\n# that have a tag property equal to "Governance"\n\n# also gets the BasicProfile instance and corresponding\n# username property for each of those Posts instances\n\nquery TagFiltered {\n  postsIndex(filters: { where: { tag: { equalTo: "Governance" } } }, first: 10) {\n    edges {\n      node {\n        body\n        created\n        profile {\n          username\n        }\n      }\n    }\n  }\n}'},{title:"Date Filtered",query:'# gets the last 10 indexed Posts instances (if exists)\n# using a filter that grabs only the Posts instances\n# that have a created property greater than "2022-05-10T14:15:00Z"\n\n# also gets the BasicProfile instance and corresponding\n# username property for each of those Posts instances\n\nquery DateFiltered {\n  postsIndex(filters: { where: { created: { greaterThan: "2022-05-10T14:15:00Z" } } }, last: 10) {\n    edges {\n      node {\n        body\n        created\n        profile {\n          username\n        }\n      }\n    }\n  }\n}'},{title:"Combine Filters",query:'# gets the first 20 indexed Posts instances (if exists)\n# using a double filter that grabs only the Posts instances\n# that have a created property greater than "2022-05-10T14:15:00Z"\n# AND a tag property equal to "Governance"\n\nquery CombineFilters {\n  postsIndex(\n    filters: {\n      and: [\n        { where: { created: { greaterThan: "2022-05-10T14:15:00Z" } } }\n        { and: { where: { tag: { equalTo: "Governance" } } } }\n      ]\n    }\n    first: 20\n  ) {\n    edges {\n      node {\n        body\n        created\n        tag\n      }\n    }\n  }\n}'}]}};function m(e){return(0,r.Z)()?i.createElement(a.yB,{defaultTabs:u[e.queries].values,storage:null,fetcher:p}):i.createElement("div",null,"loading...")}t(306),t(1559);const h={title:"ComposeDB API Sandbox",description:"Test out example GraphQL queries on ComposeDB to learn how to access documents by relations, how to filter, and more.",hide_table_of_contents:!0},f="Sandbox",g={type:"mdx",permalink:"/docs-docusaurus/sandbox",source:"@site/src/pages/sandbox.md",title:"ComposeDB API Sandbox",description:"Test out example GraphQL queries on ComposeDB to learn how to access documents by relations, how to filter, and more.",frontMatter:{title:"ComposeDB API Sandbox",description:"Test out example GraphQL queries on ComposeDB to learn how to access documents by relations, how to filter, and more.",hide_table_of_contents:!0}},y=[{value:"Data Models",id:"data-models",level:2},{value:"Instructions",id:"instructions",level:3},{value:"Reading Profiles",id:"reading-profiles",level:2},{value:"<br />",id:"br-",level:2},{value:"Reading Posts",id:"reading-posts",level:2},{value:"<br />",id:"br--1",level:2},{value:"Reading Comments",id:"reading-comments",level:2},{value:"<br />",id:"br--2",level:2},{value:"Next Steps",id:"next-steps",level:2}],b={toc:y},k="wrapper";function x(e){let{components:n,...t}=e;return(0,o.kt)(k,(0,s.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sandbox"},"Sandbox"),(0,o.kt)("p",null,"Test out several pre-made example queries below to gain hands-on exposure to accessing documents by relations, filtering and ordering by fields, and combining query logic."),(0,o.kt)("p",null,"For a deeper dive into querying, visit the ",(0,o.kt)("a",{parentName:"p",href:"./docs/composedb/guides/data-interactions/queries"},(0,o.kt)("strong",{parentName:"a"},"queries"))," page."),(0,o.kt)("h2",{id:"data-models"},"Data Models"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The schema definitions that this sandbox uses are outlined in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ceramicstudio/EthDenver2023Demo/tree/main/composites"},(0,o.kt)("strong",{parentName:"a"},"this repository")),". The sandbox has been pre-populated with data corresponding to several fictionary people."),(0,o.kt)("h3",{id:"instructions"},"Instructions"),(0,o.kt)("p",null,"To interact with the ComposeDB Sandbox, simply press the pink play icon to execute the pre-written queries in the left-hand side of the embedded GraphiQL IDE. Results returned from your query will populate in the right-hand side of the interface."),(0,o.kt)("p",null,"You can also alter your query logic however you see fit, or build your own queries entirely from scratch based on the schema definitions."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Please note that this sandbox only processes read requests.")),(0,o.kt)("h2",{id:"reading-profiles"},"Reading Profiles"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Use the example queries below to access data related to the ",(0,o.kt)("inlineCode",{parentName:"p"},"BasicProfile")," model:"),(0,o.kt)("div",{style:{height:"60rem",width:"100%",margin:"auto"}},(0,o.kt)(m,{queries:"profiles",mdxType:"Sandbox"})),(0,o.kt)("h2",{id:"br-"},(0,o.kt)("br",null)),(0,o.kt)("h2",{id:"reading-posts"},"Reading Posts"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Use the example queries below to access data related to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Posts")," model:"),(0,o.kt)("div",{style:{height:"60rem",width:"100%",margin:"auto"}},(0,o.kt)(m,{queries:"posts",mdxType:"Sandbox"})),(0,o.kt)("h2",{id:"br--1"},(0,o.kt)("br",null)),(0,o.kt)("h2",{id:"reading-comments"},"Reading Comments"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Use the example queries below to access data related to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Comments")," model:"),(0,o.kt)("div",{style:{height:"60rem",width:"100%",margin:"auto"}},(0,o.kt)(m,{queries:"comments",mdxType:"Sandbox"})),(0,o.kt)("h2",{id:"br--2"},(0,o.kt)("br",null)),(0,o.kt)("h2",{id:"next-steps"},"Next Steps"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"To begin building with ComposeDB in your local environment using the same data models you just queried, get started ",(0,o.kt)("a",{parentName:"p",href:"./docs/composedb/set-up-your-environment"},(0,o.kt)("strong",{parentName:"a"},"Setting Up Your Environment")),"."))}x.isMDXComponent=!0},4955:()=>{}}]);